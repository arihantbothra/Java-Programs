/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;
import Business.AirplaneDetailList;
import Business.AirplaneDetails;
import com.csvreader.CsvReader;
import java.util.List;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.util.stream.Collectors;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arihant
 */
public class ResultJPanel extends javax.swing.JPanel {

  private AirplaneDetailList asl;
    public ResultJPanel(AirplaneDetailList asl)  {
        initComponents();
        this.asl= asl;
        populateTable();
       
    }

    
    public void populateTable()
    {
         DefaultTableModel dtm = (DefaultTableModel)ansTable.getModel();
              
              try{
                        SimpleDateFormat df = new SimpleDateFormat("mm/dd/yyyy");
			CsvReader csv = new CsvReader("C:\\Users\\ariha\\Documents\\FLightDetail.csv");
			csv.readHeaders();	
                        while (csv.readRecord())
			{                            
                             Object row[] = new Object[12];
				 row[0]= csv.get("Serial No.");
				 row[1] = csv.get("Model No.");
				 row[2]= csv.get("Date");
				 row[3] = csv.get("Time");
				 row[4] = csv.get("Manufacturer");
				 row[5] = csv.get("Manufacturing year");
                                 row[6] = csv.get("Time at Catlouge update");
				 row[7] = csv.get("Maximum Seats");
				 row[8] = csv.get("Minimum Seats available");
				 row[9] = csv.get("Maintaince Expiration Date");
                                 row[10] = csv.get("Airport");
                                 row[11] = csv.get("Destination");
				dtm.addRow(row);
                                 AirplaneDetails apd = asl.addDetails();
                                 apd.setSerialNo(row[0].toString());
                                 apd.setModelNo(row[1].toString());
                                 apd.setDate(row[2].toString());
                                 apd.setTime(row[3].toString());
                                 apd.setManufacturer(row[4].toString());
                                 apd.setManufacturingYear(row[5].toString());
                                 apd.setCatlougeUpdateTime(row[6].toString());
                                 apd.setSeatsNo(row[7].toString());
                                 apd.setMinSeatNo(row[8].toString());
                                 apd.setManExpDate(row[9].toString());
                                 apd.setAirport(row[10].toString());
                                 apd.setDestination(row[11].toString());
                                 // perform program logic here				
			}	
			csv.close();                        
                        }
                
                catch (FileNotFoundException e) 
                {
			e.printStackTrace();
		} 
                catch (IOException e)
                {
			e.printStackTrace();
		}
        
    }
       
              /**
               *
               * @param adl
               */
              
              
              /**
               * This method is called from within the constructor to initialize the form.
               * WARNING: Do NOT modify this code. The content of this method is always
               * regenerated by the Form Editor.
               */
            //  @SuppressWarnings("unchecked");
 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ansTable = new javax.swing.JTable();
        resultLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        contentTable1 = new javax.swing.JTable();
        first_flight_btn = new javax.swing.JButton();
        boeing_flights = new javax.swing.JButton();
        year = new javax.swing.JButton();
        seat_range = new javax.swing.JButton();
        serail_number = new javax.swing.JButton();
        modell_number1 = new javax.swing.JButton();
        manufacturer = new javax.swing.JButton();
        available_flight = new javax.swing.JButton();
        catalog = new javax.swing.JButton();
        airport_avail = new javax.swing.JButton();
        expired = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        addcontent = new javax.swing.JButton();
        filter = new javax.swing.JButton();

        ansTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial No.", "Model No.", "Date", "Time", "Manufacturer ", "Manufacturing year ", "Time at Catlouge update ", "Maximum Seats ", "Minimum Seats available ", "Maintaince Expiration Date ", "Airport", "Destination "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ansTable);

        resultLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        resultLabel.setText("Result");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        contentTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial No.", "Model No.", "Date", "Time", "Manufacturer ", "Manufacturing year ", "Time at Catlouge update ", "Maximum Seats ", "Minimum Seats available ", "Maintaince Expiration Date ", "Airport", "Destination "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(contentTable1);

        first_flight_btn.setText("First Flight");
        first_flight_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                first_flight_btnActionPerformed(evt);
            }
        });

        boeing_flights.setText("Boeing Flights");
        boeing_flights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boeing_flightsActionPerformed(evt);
            }
        });

        year.setText("Year");
        year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearActionPerformed(evt);
            }
        });

        seat_range.setText("Seat Range");
        seat_range.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seat_rangeActionPerformed(evt);
            }
        });

        serail_number.setText("Serial Number");
        serail_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serail_numberActionPerformed(evt);
            }
        });

        modell_number1.setText("Model Number");
        modell_number1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modell_number1ActionPerformed(evt);
            }
        });

        manufacturer.setText("Manufacturer");
        manufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufacturerActionPerformed(evt);
            }
        });

        available_flight.setText("Available Flights");
        available_flight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                available_flightActionPerformed(evt);
            }
        });

        catalog.setText("Catalog Update");
        catalog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catalogActionPerformed(evt);
            }
        });

        airport_avail.setText("Airport Avail.");
        airport_avail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airport_availActionPerformed(evt);
            }
        });

        expired.setText("Expired");
        expired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expiredActionPerformed(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        addcontent.setText("Add Content");
        addcontent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addcontentActionPerformed(evt);
            }
        });

        filter.setText("Filter");
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(342, 342, 342)
                        .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modell_number1)
                            .addComponent(first_flight_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(available_flight)
                                .addGap(18, 18, 18)
                                .addComponent(boeing_flights, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(seat_range))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(catalog)
                                .addGap(18, 18, 18)
                                .addComponent(airport_avail, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(expired, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(serail_number, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(deleteButton)
                        .addGap(88, 88, 88)
                        .addComponent(addcontent)
                        .addGap(174, 174, 174)
                        .addComponent(updateButton)
                        .addGap(210, 210, 210)
                        .addComponent(filter)
                        .addContainerGap(219, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(resultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(updateButton)
                    .addComponent(addcontent)
                    .addComponent(filter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(first_flight_btn)
                    .addComponent(available_flight)
                    .addComponent(boeing_flights)
                    .addComponent(year)
                    .addComponent(seat_range)
                    .addComponent(serail_number))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modell_number1)
                    .addComponent(manufacturer)
                    .addComponent(refresh)
                    .addComponent(catalog)
                    .addComponent(airport_avail)
                    .addComponent(expired))
                .addContainerGap(61, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int row = ansTable.getSelectedRow();        
        asl.deletedata(row);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        DefaultTableModel dtm = (DefaultTableModel)ansTable.getModel();
        
        int row = ansTable.getSelectedRow();
        int column = ansTable.getColumnCount();
       
        String serial = (String) ansTable.getModel().getValueAt(row, 0);
        String model = (String) ansTable.getModel().getValueAt(row, 1);
        String date = (String) ansTable.getModel().getValueAt(row, 2);
        String time = (String) ansTable.getModel().getValueAt(row, 3);
        String manu = (String) ansTable.getModel().getValueAt(row, 4);
        String manu_year = (String) ansTable.getModel().getValueAt(row, 5);
        String max = (String) ansTable.getModel().getValueAt(row, 7);
        String min = (String) ansTable.getModel().getValueAt(row, 8);
        String expiry = (String) ansTable.getModel().getValueAt(row, 9);
        String airport = (String) ansTable.getModel().getValueAt(row, 10);
        String dest = (String) ansTable.getModel().getValueAt(row, 11);
        UpdateJPanel updatepanel = new UpdateJPanel(asl);        
        updatepanel.text(row, serial, model, date, time, manu, manu_year, max, min, expiry, airport, dest);
        
        
    }//GEN-LAST:event_updateButtonActionPerformed

    private void first_flight_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_first_flight_btnActionPerformed
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        DefaultTableModel dtm1 = (DefaultTableModel)ansTable.getModel();
        SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy hh:mm");
        SimpleDateFormat df1 = new SimpleDateFormat("MM/dd/yyyy");
        String timeString = df.format(new Date()).substring(10);
        Date date1 = new Date();
        Date date2 = null;
        Date md1 = null;
        Date md2 = null;
        Date mydate = null;
        int count = 0;
        int arraysize = dtm1.getRowCount();
        Object [] datearray = new Object[arraysize];       
        
        
        
        int row = 0;
        for(AirplaneDetails asl : asl.getDetails())
            {
                    String d = asl.getDate();
                    String time = asl.getTime();
                    String d1 = d + " " + time;
                    datearray[row] = d1;
                    row ++;
            } 
               
       
        String obj1 = (String) datearray[0];
        try {
            md1 = df.parse(obj1);
        } catch (ParseException ex) {
            Logger.getLogger(ResultJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i = 1; i <= arraysize - 1; i++){
            try {
                String obj2 = datearray[i].toString();
                md2 = df.parse(obj2);
            } catch (ParseException ex) {
                Logger.getLogger(ResultJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(md1.compareTo(date1) > 0){
                if(md1.compareTo(md2) < 0){
                    mydate = md1;
                    continue;
                }
                else if(md2.compareTo(date1) > 0){
                    mydate = md2;
                }
                    
            }
        }
        
        for(AirplaneDetails asl : asl.getDetails())
                {
                    Date dob_date = null;
                    String dob = asl.getDate();
                    String time = asl.getTime();
                    String d1 = dob + " " + time;
                    try {
                        dob_date = df.parse(d1);
                    } catch (ParseException ex) {
                        Logger.getLogger(ResultJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if(dob_date.compareTo(mydate) == 0 ){
                     Object row_set[] = new Object[12];
                     row_set[0] = asl.getSerialNo();
                     row_set[1]= asl.getModelNo();
                     row_set[2]= asl.getDate();
                     row_set[3]= asl.getTime();
                     row_set[4]= asl.getManufacturer();
                     row_set[5]= asl.getManufacturingYear();
                     row_set[6]= asl.getCatlougeUpdateTime();
                     row_set[7]= asl.getManufacturingYear();
                     row_set[8]= asl.getSeatsNo();
                     row_set[9]= asl.getManExpDate();
                     row_set[10]= asl.getAirport();
                     row_set[11]= asl.getDestination();
                     dtm.addRow(row_set);
                     
                    }
                } 
    }//GEN-LAST:event_first_flight_btnActionPerformed

    private void boeing_flightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boeing_flightsActionPerformed
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);
        for(AirplaneDetails asl : asl.getDetails()){
            if(asl.getManufacturer().equals("Boeing")){
             Object row[] = new Object[12];
                     row[0] = asl.getSerialNo();
                     row[1]= asl.getModelNo();
                     row[2]= asl.getDate();
                     row[3]= asl.getTime();
                     row[4]= asl.getManufacturer();
                     row[5]= asl.getManufacturingYear();
                     row[6]= asl.getCatlougeUpdateTime();
                     row[7]= asl.getManufacturingYear();
                     row[8]= asl.getSeatsNo();
                     row[9]= asl.getManExpDate();
                     row[10]= asl.getAirport();
                     row[11]= asl.getDestination();
                     dtm.addRow(row);   
            }
        }
    }//GEN-LAST:event_boeing_flightsActionPerformed

    private void yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearActionPerformed
        // TODO add your handling code here:
        String year = JOptionPane.showInputDialog("Enter Year to get the Flight List by Year of Manufacturing");
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);
        for(AirplaneDetails asl : asl.getDetails()){
            if(asl.getManufacturingYear().equals(year)){
                    Object row[] = new Object[12];
                    row[0] = asl.getSerialNo();
                    row[1]= asl.getModelNo();
                    row[2]= asl.getDate();
                    row[3]= asl.getTime();
                    row[4]= asl.getManufacturer();
                    row[5]= asl.getManufacturingYear();
                    row[6]= asl.getCatlougeUpdateTime();
                    row[7]= asl.getManufacturingYear();
                    row[8]= asl.getSeatsNo();
                    row[9]= asl.getManExpDate();
                    row[10]= asl.getAirport();
                    row[11]= asl.getDestination();
                    dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_yearActionPerformed

    private void seat_rangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seat_rangeActionPerformed
        String minstr = JOptionPane.showInputDialog("Enter Minimum Seats");
        String maxstr = JOptionPane.showInputDialog("Enter Maximum Seats");
        
        int min = Integer.parseInt(minstr);
        int max = Integer.parseInt(maxstr);
        System.out.println(min + "" + max);
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);        
        for(AirplaneDetails asl : asl.getDetails()){
            String maxrange = asl.getSeatsNo();
            int maxval = Integer.parseInt(maxrange);
            String minrange = asl.getMinSeatNo();
            int minval = Integer.parseInt(minrange);
            if(minval >= min && max > maxval){
                
                    Object row[] = new Object[12];
                    row[0] = asl.getSerialNo();
                    row[1]= asl.getModelNo();
                    row[2]= asl.getDate();
                    row[3]= asl.getTime();
                    row[4]= asl.getManufacturer();
                    row[5]= asl.getManufacturingYear();
                    row[6]= asl.getCatlougeUpdateTime();
                    row[7]= asl.getSeatsNo();
                    row[8]= asl.getMinSeatNo();
                    row[9]= asl.getManExpDate();
                    row[10]= asl.getAirport();
                    row[11]= asl.getDestination();
                    dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_seat_rangeActionPerformed

    private void serail_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serail_numberActionPerformed
        String serial = JOptionPane.showInputDialog("Enter Serial Number of the Flight");
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);
        for(AirplaneDetails asl : asl.getDetails()){
            if(asl.getSerialNo().equals(serial)){
                    Object row[] = new Object[12];
                    row[0] = asl.getSerialNo();
                    row[1]= asl.getModelNo();
                    row[2]= asl.getDate();
                    row[3]= asl.getTime();
                    row[4]= asl.getManufacturer();
                    row[5]= asl.getManufacturingYear();
                    row[6]= asl.getCatlougeUpdateTime();
                    row[7]= asl.getManufacturingYear();
                    row[8]= asl.getSeatsNo();
                    row[9]= asl.getManExpDate();
                    row[10]= asl.getAirport();
                    row[11]= asl.getDestination();
                    dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_serail_numberActionPerformed

    private void modell_number1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modell_number1ActionPerformed
        String model = JOptionPane.showInputDialog("Enter Model Number of the Flight");
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);
        for(AirplaneDetails asl : asl.getDetails()){
            if(asl.getModelNo().equals(model)){
                    Object row[] = new Object[12];
                    row[0] = asl.getSerialNo();
                    row[1]= asl.getModelNo();
                    row[2]= asl.getDate();
                    row[3]= asl.getTime();
                    row[4]= asl.getManufacturer();
                    row[5]= asl.getManufacturingYear();
                    row[6]= asl.getCatlougeUpdateTime();
                    row[7]= asl.getManufacturingYear();
                    row[8]= asl.getSeatsNo();
                    row[9]= asl.getManExpDate();
                    row[10]= asl.getAirport();
                    row[11]= asl.getDestination();
                    dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_modell_number1ActionPerformed

    private void manufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufacturerActionPerformed
        
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);
        for(AirplaneDetails asl : asl.getDetails()){
                    Object row[] = new Object[12];
                    row[0] = null;
                    row[1]= null;
                    row[2]= null;
                    row[3]= null;
                    row[4]= asl.getManufacturer();
                    row[5]= null;
                    row[6]= null;
                    row[7]= null;
                    row[8]= null;
                    row[9]= null;
                    row[10]= null;
                    row[11]= null;
                    dtm.addRow(row);
        }
    }//GEN-LAST:event_manufacturerActionPerformed

    private void available_flightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_available_flightActionPerformed
        
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        DefaultTableModel dtm1 = (DefaultTableModel)ansTable.getModel();
        dtm.setRowCount(0);
        dtm1.setRowCount(0);
        SimpleDateFormat df = new SimpleDateFormat("MM/dd/yyyy hh:mm");
        Date date1 = new Date();
        for(AirplaneDetails asl : asl.getDetails())
                {
                    Date dob_date = null;
                    String dob = asl.getDate();
                    String time = asl.getTime();
                    String d1 = dob + " " + time;
                    try {
                        dob_date = df.parse(d1);
                    } catch (ParseException ex) {
                        Logger.getLogger(ResultJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if(dob_date.compareTo(date1) > 0 ){
                     Object row_set[] = new Object[12];
                     row_set[0] = asl.getSerialNo();
                     row_set[1]= asl.getModelNo();
                     row_set[2]= asl.getDate();
                     row_set[3]= asl.getTime();
                     row_set[4]= asl.getManufacturer();
                     row_set[5]= asl.getManufacturingYear();
                     row_set[6]= asl.getCatlougeUpdateTime();
                     row_set[7]= asl.getManufacturingYear();
                     row_set[8]= asl.getSeatsNo();
                     row_set[9]= asl.getManExpDate();
                     row_set[10]= asl.getAirport();
                     row_set[11]= asl.getDestination();
                     dtm.addRow(row_set);
                    }
                    else{
                     Object row_set[] = new Object[12];
                     row_set[0] = asl.getSerialNo();
                     row_set[1]= asl.getModelNo();
                     row_set[2]= asl.getDate();
                     row_set[3]= asl.getTime();
                     row_set[4]= asl.getManufacturer();
                     row_set[5]= asl.getManufacturingYear();
                     row_set[6]= asl.getCatlougeUpdateTime();
                     row_set[7]= asl.getManufacturingYear();
                     row_set[8]= asl.getSeatsNo();
                     row_set[9]= asl.getManExpDate();
                     row_set[10]= asl.getAirport();
                     row_set[11]= asl.getDestination();
                     dtm1.addRow(row_set);
                    }
                } 
        
        
        
    }//GEN-LAST:event_available_flightActionPerformed

    private void catalogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catalogActionPerformed
        int row = contentTable1.getSelectedRow();
        String timestamp = (String) contentTable1.getModel().getValueAt(row, 6);
        JOptionPane.showMessageDialog(null, "The Last Updated Time: " + timestamp);
        
    }//GEN-LAST:event_catalogActionPerformed

    private void airport_availActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airport_availActionPerformed
        // TODO add your handling code here:
        String airport = JOptionPane.showInputDialog("Enter Airport Name");
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);
        for(AirplaneDetails asl : asl.getDetails()){
            if(asl.getAirport().equals(airport)){
                    Object row[] = new Object[12];
                    row[0] = asl.getSerialNo();
                    row[1]= asl.getModelNo();
                    row[2]= asl.getDate();
                    row[3]= asl.getTime();
                    row[4]= asl.getManufacturer();
                    row[5]= asl.getManufacturingYear();
                    row[6]= asl.getCatlougeUpdateTime();
                    row[7]= asl.getManufacturingYear();
                    row[8]= asl.getSeatsNo();
                    row[9]= asl.getManExpDate();
                    row[10]= asl.getAirport();
                    row[11]= asl.getDestination();
                    dtm.addRow(row);
                }
        }
            
    }//GEN-LAST:event_airport_availActionPerformed

    private void expiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expiredActionPerformed
        SimpleDateFormat df = new SimpleDateFormat("mm/dd/yyyy");
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);
        Date d1 = null;
        Date d2 = null;
        
        for(AirplaneDetails asl : asl.getDetails()){
            try {
                d1 = df.parse(asl.getManExpDate());
                d2 = df.parse("12/12/2020");
            } catch (ParseException ex) {
                Logger.getLogger(ResultJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(d1.compareTo(d2) < 0){
                    Object row[] = new Object[12];
                    row[0] = asl.getSerialNo();
                    row[1]= asl.getModelNo();
                    row[2]= asl.getDate();
                    row[3]= asl.getTime();
                    row[4]= asl.getManufacturer();
                    row[5]= asl.getManufacturingYear();
                    row[6]= asl.getCatlougeUpdateTime();
                    row[7]= asl.getManufacturingYear();
                    row[8]= asl.getSeatsNo();
                    row[9]= asl.getManExpDate();
                    row[10]= asl.getAirport();
                    row[11]= asl.getDestination();
                    dtm.addRow(row);
            }
                    String d = asl.getDate();
            try {
                Date dt = df.parse(d);
            } catch (ParseException ex) {
                Logger.getLogger(ResultJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
                    System.out.println();
        }
    }//GEN-LAST:event_expiredActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        DefaultTableModel dtm1 = (DefaultTableModel)ansTable.getModel();
        dtm.setRowCount(0);
        dtm1.setRowCount(0);
        for(AirplaneDetails asl : asl.getDetails())
                {
                     Object row[] = new Object[12];
                     row[0] = asl.getSerialNo();
                     row[1]= asl.getModelNo();
                     row[2]= asl.getDate();
                     row[3]= asl.getTime();
                     row[4]= asl.getManufacturer();
                     row[5]= asl.getManufacturingYear();
                     row[6]= asl.getCatlougeUpdateTime();
                     row[7]= asl.getSeatsNo();
                     row[8]= asl.getMinSeatNo();
                     row[9]= asl.getManExpDate();
                     row[10]= asl.getAirport();
                     row[11]= asl.getDestination();
                     dtm.addRow(row);
                     dtm1.addRow(row);
                }
    }//GEN-LAST:event_refreshActionPerformed

    private void addcontentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addcontentActionPerformed
        
        AddData adddata = new AddData(asl);
        
    }//GEN-LAST:event_addcontentActionPerformed

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        String airport = JOptionPane.showInputDialog("From which Airport?");
        String dest = JOptionPane.showInputDialog("Destination?");
        String manu = JOptionPane.showInputDialog("Manufacturer?");
        String date = JOptionPane.showInputDialog("Which Date?");
        String time = JOptionPane.showInputDialog("What Time?");
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.setRowCount(0);
        for(AirplaneDetails asl : asl.getDetails())
            {

            if( date.equals(asl.getDate()) && time.equals(asl.getTime()) && manu.equals(asl.getManufacturer()) && airport.equals(asl.getAirport()) && dest.equals(asl.getDestination())){
             
             Object row_set[] = new Object[12];
             row_set[0] = asl.getSerialNo();
             row_set[1]= asl.getModelNo();
             row_set[2]= asl.getDate();
             row_set[3]= asl.getTime();
             row_set[4]= asl.getManufacturer();
             row_set[5]= asl.getManufacturingYear();
             row_set[6]= asl.getCatlougeUpdateTime();
             row_set[7]= asl.getManufacturingYear();
             row_set[8]= asl.getSeatsNo();
             row_set[9]= asl.getManExpDate();
             row_set[10]= asl.getAirport();
             row_set[11]= asl.getDestination();
             dtm.addRow(row_set);

            }
           }
    }//GEN-LAST:event_filterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addcontent;
    private javax.swing.JButton airport_avail;
    private javax.swing.JTable ansTable;
    private javax.swing.JButton available_flight;
    private javax.swing.JButton boeing_flights;
    private javax.swing.JButton catalog;
    private javax.swing.JTable contentTable1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton expired;
    private javax.swing.JButton filter;
    private javax.swing.JButton first_flight_btn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton manufacturer;
    private javax.swing.JButton modell_number1;
    private javax.swing.JButton refresh;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JButton seat_range;
    private javax.swing.JButton serail_number;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton year;
    // End of variables declaration//GEN-END:variables

    public void adddata(Object[] row) {
        DefaultTableModel dtm = (DefaultTableModel)contentTable1.getModel();
        dtm.addRow(row);
    }

     
    }

